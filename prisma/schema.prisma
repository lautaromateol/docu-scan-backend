generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  pictureUrl String?
  Member     Member[]
}

model Workspace {
  id         String     @id @default(uuid())
  name       String
  inviteCode String
  Member     Member[]
  Contract   Contract[]
}

enum Role {
  MEMBER
  ADMIN
}

model Member {
  id          String    @id @default(uuid())
  role        Role
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

enum ContractCategory {
  TRANSFER
  USE
  SERVICES
  GUARANTEE
  COLABORATION
}

enum ContractStatus {
  DRAFT
  SIGNED
  EXPIRED
  TERMINATED
}

enum ObligationType {
  PRIMARY
  ACCESSORY
  CONDITIONAL
  RECURRING
}

enum ClauseType {
  GENERAL
  CONFIDENTIALITY
  PENALTY
  JURISDICTION
  OTHER
}

model Contract {
  id                 String           @id @default(uuid())
  workspace          Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId        String
  title              String
  category           ContractCategory
  descriptionSummary String?
  jurisdiction       String?
  governingLaw       String?
  signingDate        DateTime?
  startDate          DateTime?
  endDate            DateTime?
  status             ContractStatus   @default(DRAFT)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  parties            ContractParty[]     @relation("ContractToParties")
  obligations        Obligation[]        @relation("ContractToObligations")
  terminationClauses TerminationClause[] @relation("ContractToTerminationClauses")
  deadlines          ContractDeadline[]  @relation("ContractToDeadlines")
  clauses            ContractClause[]    @relation("ContractToClauses")
}

model ContractParty {
  id          String       @id @default(uuid())
  contract    Contract     @relation("ContractToParties", fields: [contractId], references: [id], onDelete: Cascade)
  contractId  String
  name        String
  identifier  String?
  role        String
  obligations Obligation[] @relation("PartyToObligations")
}

model Obligation {
  id          String         @id @default(uuid())
  contract    Contract       @relation("ContractToObligations", fields: [contractId], references: [id], onDelete: Cascade)
  contractId  String
  party       ContractParty? @relation("PartyToObligations", fields: [partyId], references: [id])
  partyId     String?
  description String
  type        ObligationType
  dueDate     DateTime?
  recurrence  String?
}

model TerminationClause {
  id               String   @id @default(uuid())
  contract         Contract @relation("ContractToTerminationClauses", fields: [contractId], references: [id], onDelete: Cascade)
  contractId       String
  description      String
  cause            String
  noticePeriodDays Int?
}

model ContractDeadline {
  id          String   @id @default(uuid())
  contract    Contract @relation("ContractToDeadlines", fields: [contractId], references: [id], onDelete: Cascade)
  contractId  String
  description String
  date        DateTime
  type        String
}

model ContractClause {
  id         String     @id @default(uuid())
  contract   Contract   @relation("ContractToClauses", fields: [contractId], references: [id], onDelete: Cascade)
  contractId String
  title      String
  bodyText   String
  clauseType ClauseType
}
